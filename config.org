#+TITLE: My emacs doom configuration
#+AUTHOR: Huy Le
#+EMAIL: dacrazyazn.com
#+LANGUAGE: en
#+STARTUP: inlineimages
#+PROPERTY: header-args :tangle yes :cache yes :results silent :padline no

* Notes
** Configuration Notes
~use-package!~ vs ~package!~
~use-package!~ is to be used in the ~config.el~
~package!~ is to be used only in the ~packages.el~

+ run ~.emacs.d/bin/doom sync~ to get things rebuilt
  + would ~M-x doom/reload~ work? have yet to try

Help menus
+ ~SPC-h-o~ to bring up symbols
+ ~SPC-h-v~ to bring up variables
+ ~SPC-h-f~ to bring up functions
** Resources
*** [[https://github.com/nmartin84/.doom.d][nmartin84 Github]] :: good for literate programming
*** [[https://dotdoom.rgoswami.me/config.html][Literate doom emacs config]] :: blog post using org literate programming
  Really good resource, start checking out localleader stuff here
*** [[https://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs configuration]][[https://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's Emacs configuration]]
*** [[https://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html][The Chronicle]] - good resource to learn about orgmode and detailed explanation
* Personal Information
** Set full name
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Huy Le")
#+END_SRC
** Set email address
#+BEGIN_SRC emacs-lisp
(setq user-mail-address "dacrazyazn.com")
#+END_SRC
* Configuration
** Doom core
Here I setup my config for the =doom-emacs= [[doom:core/][core]]

#+begin_src emacs-lisp
;; (delq! t custom-theme-load-path)                             ;get the themes that i want

(add-to-list 'default-frame-alist '(fullscreen . maximized)) ; starting emacs fullscreen
(menu-bar-mode -1)                                           ; take aware the menu bar

(setq-default
 delete-by-moving-to-trash t                                 ; Delete files to trash
 tab-width 4                                                 ; Set width for tabs
 uniquify-buffer-name-style 'forward                         ; Uniquify buffer names
 window-combination-resize t                                 ; take new window space from all other windows (not just current)
 x-stretch-cursor t)                                         ; Stretch cursor to the glyph width

(setq undo-limit 80000000                                    ; Raise undo-limit to 80Mb
      evil-want-fine-undo t                                  ; By default while in insert all changes are one big blob. Be more granular
      auto-save-default t                                    ; Nobody likes to loose work, I certainly don't
      inhibit-compacting-font-caches t                       ; When there are lots of glyphs, keep them in memory
      truncate-string-ellipsis "â€¦")                          ; Unicode ellispis are nicer than "...", and also save /precious/ space

(delete-selection-mode 1)                                    ; Replace selection when inserting text
(global-subword-mode 1)                                      ; Iterate through CamelCase words

(setq create-lockfiles nil)                                  ; Dont create lockfiles for files being edited

(setq doom-scratch-buffer-major-mode t)                      ; Make scratchpad buffers inherit the major mode of the current buffer

#+end_src

Setting whitespaces
#+begin_src emacs-lisp
;; (after! whitespace
;;   ;; (setq show-trailing-whitespace t)                            ; highlight trailing whitespace
;;   (setq whitespace-style (quote ((face tabs tab-mark))))
;;   )
#+end_src
*** EmacsServer

#+BEGIN_SRC emacs-lisp
;; (load "server")
;; (unless (server-running-p) (server-start))
#+END_SRC

*** [[doom:core/core-keybinds.el][Keybinds]]

Here I set my keybinds these are applied on top of the [[doom-modules:config/default/+emacs-bindings.el][defaults]]
**** Localleader
+ Default ~localleader~ is ~SPC-m~
+ see if we can get this updated to ~;~

#+BEGIN_SRC emacs-lisp
(setq doom-localleader-key ";")
(setq doom-localleader-alt-key "M-;")
#+END_SRC

**** Global keybinds
Updating EViL Keybindings

+ want to be able to manulate buffer similar to Vim
+ This will probably taking some diggin because ~:q~ is tied o EVIL mode?
  try looking up ~evil-delete-window~
  or just ~delete-window~ in general
+ in Emacs this feature is ~C-x, 0~ to delete the current window
  to delete the other window it would be ~C-x, 1~

#+BEGIN_SRC emacs-lisp
;; (map!

;;  "C-h"    #'evil-window-left
;;  "C-j"    #'evil-window-down
;;  "C-k"    #'evil-window-up
;;  "C-l"    #'evil-window-right
;;  ;; :n "q"      #'+workspace/close-window-or-workspace
;;  :n "Q"      #'evil-record-macro

;;  )
#+END_SRC

***** TODO Orgmode override these keybindings

**** Use ~] SPC~ and ~[ SPC~ to insert newlines above and below
 Similar to [[github:tpope/vim-unimpaired][vim-unimpaired]]
#+BEGIN_SRC emacs-lisp
(map!
 (:after evil
   :m  "] SPC" #'evil-motion-insert-newline-below
   :m  "[ SPC" #'evil-motion-insert-newline-above))
#+END_SRC

**** Splitting Buffers
This would be used when looking at a list
and doing ~C-o s~ for horizontal split
#+BEGIN_SRC emacs-lisp
;; (after! ivy
;;   (ivy-set-actions
;;    'ivy-switch-buffer
;;    '(("s" evil-window-split "split horizontally")
;;      ("v" evil-window-vsplit "split vertically")))
;;   (ivy-set-actions
;;    'counsel-find-file
;;    '(("s" evil-window-split "split horizontally")
;;      ("v" evil-window-vsplit "split vertically"))))
#+END_SRC
**** Treemacs
Allow ~C-h~ and ~C-l~ to switch buffers
#+BEGIN_SRC emacs-lisp
(after! treemacs-evil
    :config
    (treemacs-display-current-project-exclusively)
    (map!
        (:after treemacs-evil
            (:map evil-treemacs-state-map
                "C-h" #'evil-window-left
                "C-l" #'evil-window-right
                "s v"    #'treemacs-visit-node-horizontal-split
                "s g"    #'treemacs-visit-node-vertical-split
                )))
  )


#+END_SRC

**** Show keybind help with less of a delay
#+BEGIN_SRC emacs-lisp
(after! which-key
  (setq which-key-idle-delay 0.5
        which-key-idle-secondary-delay 0.01
        which-key-sort-order 'which-key-key-order-alpha))
#+END_SRC

**** Movement to next visual line
useful when there are lineswrappings

#+BEGIN_SRC emacs-lisp
;; (setq evil-respect-visual-line-mode t)
;; Make movement keys work like they should
(define-key evil-normal-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-normal-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-next-line>") 'evil-next-visual-line)
(define-key evil-motion-state-map (kbd "<remap> <evil-previous-line>") 'evil-previous-visual-line)

; Make horizontal movement cross lines
(setq-default evil-cross-lines t)
#+END_SRC

*** Mouse
#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(3)
      mouse-wheel-progressive-speed t
      mouse-wheel-follow-mouse t
      xterm-mouse-mode 1 ;; allow for mouse clicking in terminal
      scroll-step 1)

(map! :n [mouse-8] #'better-jumper-jump-backward
      :n [mouse-9] #'better-jumper-jump-forward)
#+END_SRC
*** Enable mouse support of OSX and iTerm2

#+begin_src emacs-lisp
  ;; Enable mouse support
  (unless window-system
    (global-set-key (kbd "<mouse-4>") 'scroll-down-line)
    (global-set-key (kbd "<mouse-5>") 'scroll-up-line))

;; Enable mouse support
(unless window-system
  (require 'mouse)
  (xterm-mouse-mode t)
  (global-set-key [mouse-4] (lambda ()
                              (interactive)
                              (scroll-down 1)))
  (global-set-key [mouse-5] (lambda ()
                              (interactive)
                              (scroll-up 1)))
  (defun track-mouse (e))
  (setq mouse-sel-mode t)
)
#+end_src
*** [[doom:core/core-ui.el][Ui]]
**** Set the scale factor for ~all-the-icons~
#+BEGIN_SRC emacs-lisp
(after! all-the-icons
  (setq all-the-icons-scale-factor 0.5))
#+END_SRC
**** Immediately show eldoc
#+BEGIN_SRC emacs-lisp
;; (setq eldoc-idle-delay 0)
#+END_SRC
**** Enable relative line number
this is set in init.el
#+BEGIN_SRC emacs-lisp
(setq display-line-numbers-type 'visual)
#+END_SRC
**** Zoom with
**** Flyspell
At one point, typing became noticeably laggy, Profiling revealed flyspell-post-command-hook was responsible for 47% of CPU cycles by itself! So I'm going to make use of flyspell-lazy
#+begin_src emacs-lisp
(after! flyspell (require 'flyspell-lazy) (flyspell-lazy-mode 1))
#+end_src

** Org-Mode
*** General Org-mode configuration
here everything for org should be in ~~/docs/org~ folder

+ setting the agenda files, allow orgmode to scan through to create agenda

#+BEGIN_SRC emacs-lisp
(use-package! org
  :config
  (setq org-directory (expand-file-name "~/docs/org")
        org-agenda-files (file-expand-wildcards "~/docs/org")
        ;; org-agenda-files (directory-files-recursively "~/docs/org/" "\\.org$")
        org-default-notes-file (expand-file-name "~/docs/org/scratchpad.org")
        org-cycle-separator-lines 1
        org-enforce-todo-dependencies t
        org-startup-folded t
        org-imenu-depth 4
        ;; org-cycle-separator-lines -2
        org-archive-location (concat org-directory "/archive/%s::datetree/")
        )
  (defvar +org-dir (expand-file-name "~/docs/org"))

  )
(after! org
  (map! :map org-mode-map
        :localleader
        "n" #'org-add-note)
  )
#+END_SRC

If the todo-keywords were to be set manually, make sure you run ~org-mode-restart~ for it to work

the ~(quote time)~ is the same as ~'time~
*** Org-Todo
Got it fomr Sacha Chua
The parentheses indicate keyboard shortcuts that I can use to set the task state. @ and ! toggle logging. @ prompts you for a note, and ! automatically logs the timestamp of the state change.
[[https://pages.sachachua.com/.emacs.d/Sacha.html#org68b5ede][Sacha Chua's Emacs configuration]]

To access all these different todos use
=M-x: org-todo= or on =doom= use =;+t=

#+begin_src emacs-lisp
(after! org
  (setq org-todo-keywords
        '((sequence
           "STARTED(s!)"
           "TODO(t)"  ; next action
           "NEXT(n)"  ; next action
           "IN-PROGRESS(p)"  ; next action
           "WAITING(w@/!)" "|" "DONE(x!)" "CANCELLED(c)")
         (sequence "LEARN" "TRY" "TEACH" "|" "COMPLETE(x)")
         (sequence "IDEA" "TRY" "|" "COMPLETE(x)")
         (sequence "DRAFT(d!)" "|" "DONE(x!)"))

         org-todo-keyword-faces
         '(("TODO" . (:foreground "green" :weight bold))
           ("DONE" . (:foreground "cyan" :weight bold))
           ("WAITING" . (:foreground "red" :weight bold))
           ("IN-PROGRESS" . (:foreground "yellow" :weight bold)))
))

#+end_src
*** Org-id
#+begin_src emacs-lisp
(after! org
  (setq org-id-link-to-org-use-id 't)
)
#+end_src

*** Org-Log

get all time logging into a LOGBOOK drawer
#+begin_src emacs-lisp
(after! org
 (setq org-log-into-drawer "LOGBOOK")
 (setq org-clock-into-drawer 1)
 )
#+end_src

log time when a task is done
if it is reschedule or redeadline, make a note for why
#+begin_src emacs-lisp
(after! org
  (setq
   org-log-done (quote time)
   org-log-redeadline 'note
   org-log-reschedule 'note ))
#+end_src
*** Org-Capture
:PROPERTIES:
:ID:       2d01e301-8ae0-49af-9a29-22ec48f3edf4
:END:
Capture things quickly - [[https://emacsnyc.org/assets/documents/how-i-use-org-capture-and-stuff.pdf][good article to help]]

#+BEGIN_SRC emacs-lisp
(after! org
  (setq org-capture-templates
        '(
          ("t" "Todo" entry (file+headline "~/docs/org/organizer.org" "Things To-Do") "* TODO %?\n%u\n" :clock-in t :clock-resume t)
          ("l" "Linked Todo" entry (file+headline "~/docs/org/organizer.org" "Things To-Do") "* TODO %?\n%u\n%a\n" :clock-in t :clock-resume t)
          ("m" "Meeting" entry (file+headline "~/docs/org/work.org" "Meeting Notes") "* MEETING with %? :@meeting:\n%t" :clock-in t :clock-resume t)
          ("d" "Diary" entry (file+datetree "~/docs/org/diary.org") "* %?\n%U\n" :clock-in t :clock-resume t) ;; to record thoughts as you work
          ("i" "Idea" entry (file+headline "~/docs/org/organizer.org" "Ideas") "* %? :@idea: \n%t" :clock-in t :clock-resume t)
          ("s" "scratchpad" entry (file "~/docs/org/scratchpad.org") "* %? \n%t" :clock-in t :clock-resume t) ;; for taking real fast notes, and sort later
         ))
    (map!
        ; I use org-capture more than the scratch buffer - swap the keys around
        :leader
         :desc "org capture" :g "x" #'org-capture ; shows both project-specific & generic options
         :desc "pop scratch buffer" :g "X" #'doom/open-scratch-buffer)
)
#+END_SRC

#+begin_src emacs-lisp

(with-eval-after-load 'org-capture

  ;; (defun org-hugo-new-subtree-post-capture-template ()
  ;;   "Returns `org-capture' template string for new Hugo post. See `org-capture-templates' for more information."
  ;;   (let* ((title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
  ;;          (fname (org-hugo-slug title)))
  ;;     (mapconcat #'identity
  ;;                `(
  ;;                  ,(concat "* TODO " title)
  ;;                  ":PROPERTIES:"
  ;;                  ,(concat ":EXPORT_HUGO_BUNDLE: " fname)
  ;;                  ":EXPORT_FILE_NAME: index"
  ;;                  ":END:"
  ;;                  "%?\n")                ;Place the cursor here finally
  ;;                "\n")))
    (defun org-hugo-new-subtree-post-capture-template ()
    "Returns `org-capture' template string for new Hugo post.
    See `org-capture-templates' for more information."
    (let* (;; http://www.holgerschurig.de/en/emacs-blog-from-org-to-hugo/
            (date (format-time-string (org-time-stamp-format :long :inactive) (org-current-time)))
            (title (read-from-minibuffer "Post Title: ")) ;Prompt to enter the post title
            (fname (org-hugo-slug title)))
        (mapconcat #'identity
                `(
                    ,(concat "* TODO " title)
                    ":PROPERTIES:"
                    ,(concat ":EXPORT_FILE_NAME: " fname)
                    ,(concat ":EXPORT_DATE: " date) ;Enter current date and time
                    ":END:"
                    "%?\n")                ;Place the cursor here finally
                "\n")))

    (add-to-list 'org-capture-templates
                '("h"                ;`org-capture' binding + h
                    "Hugo post"
                    entry
                    ;; It is assumed that below file is present in `org-directory'
                    ;; and that it has a "Blog Ideas" heading. It can even be a
                    ;; symlink pointing to the actual location of all-posts.org!
                    (file+olp "blog-posts.org" "Blog Ideas")
                    (function org-hugo-new-subtree-post-capture-template)))
  )
#+end_src
*** Org-hugo (ox-hugo)

#+begin_src emacs-lisp

(after! ox-hugo
    (setq org-hugo-default-static-subdirectory-for-externals "attached")
            )
#+end_src

*** Org-refile


#+BEGIN_SRC emacs-lisp
(after! org
   (setq org-refile-allow-creating-parent-nodes 'confirm)
   (setq org-refile-targets '((org-agenda-files :maxlevel . 3)))
)
#+END_SRC
*** Org-Download

there is ~org-attach-directory~ and ~org-download-image-dir~

**** Setting attachment method
the ~attach~ method is used to keep the data structure consistent with org-mode attachment system

#+BEGIN_SRC emacs-lisp
;; (setq org-attach-directory $HOME/testing/attachment)
;;(setq org-download-method 'attach)
#+END_SRC

**** DONE ChromeOS clipboard setting for screenshot
need to get this fix for MacOS since the same ~xclip~ clipboard is not being used

#+BEGIN_SRC emacs-lisp
;; (setq org-attach-directory $HOME/testing/attachment)
;; (setq org-download-screenshot-method "xclip -selection clipboard -t image/png -o > %s")

(use-package! org-download
  :config
  (setq org-download-method 'attach
        org-download-image-dir (concat org-directory "/images/")
        org-download-timestamp "_%Y%m%d_%H%M%S"
        org-download-screenshot-method
        (cond (IS-MAC "pngpaste %s")
              (IS-LINUX
               (cond ((executable-find "xclip") "xclip -selection clipboard -t image/png -o > %s")
                     ((executable-find "maim")  "maim -s %s")
                     ((executable-find "scrot") "scrot -s %s")
                     ((executable-find "gnome-screenshot") "gnome-screenshot -a -f %s"))))))
;; (after! org
;;   :config
;;     (setq org-download-screenshot-method "pngpaste %s"
;;             ))
#+END_SRC
**** TODO [#A] MacOS Clipboard setting for screenshot

*** Org-cliplink


#+BEGIN_SRC emacs-lisp

(use-package! org-cliplink
  :config
  (setq org-cliplink-transport-implementation 'curl))
#+END_SRC
*** Org-image
set to 400 if nothing is specified in the properties
make sure that imagemagick is enabled

#+begin_src emacs-lisp

(after! org
    ;; (setq org-image-actual-width 1800)
    ;; (load "~/.config/doom/org-display-inline-images-custom.el")
  (setq org-image-actual-width '(500))
  ;; (setq org-image-actual-width '(/ (display-pixel-width) 3))

)
#+end_src

Currently ~display-pixel-width~ is not an actual variable
*** Org-Journal
:PROPERTIES:
:ID:       ec33acb0-1469-4970-8953-1cf33a78f6bb
:END:

share the same fold as org-roam!! - [[https://org-roam.readthedocs.io/en/master/ecosystem/][lookie here]]
for filtering out tags and properties - [[https://orgmode.org/manual/Matching-tags-and-properties.html][look at the manual]]

#+BEGIN_SRC emacs-lisp
(after! org-journal
    (setq org-journal-dir (expand-file-name "~/docs/org/journal")
            ;; org-journal-date-prefix "#+TITLE: "
            org-journal-file-format "%Y-%m-%d.org"
            ;; org-journal-date-format "%A, %d %B %Y"
            org-journal-date-format "%A, %m/%d/%y"
            org-journal-enable-agenda-integration t
            ;; org-journal-carryover-items "/!+WAITING|+NEXT"
            org-journal-carryover-items "/!-DONE|-CANCELLED"
            org-journal-file-type 'weekly
            )

    (map! (:map org-journal-mode-map
            :n "]f"  #'org-journal-open-next-entry
            :n "[f"  #'org-journal-open-previous-entry
            :n "C-n" #'org-journal-open-next-entry
            :n "C-p" #'org-journal-open-previous-entry)
            (:map org-journal-search-mode-map
            "C-n" #'org-journal-search-next
            "C-p" #'org-journal-search-previous)
            :localleader
            (:map org-journal-mode-map
                "c" #'org-journal-new-entry
                ;; "d" #'org-journal-new-date-entry
                "n" #'org-add-note
                ;; "n" #'org-journal-open-next-entry
                ;; "p" #'org-journal-open-previous-entry
                ;; (:prefix ("d" . "date/deadline")
                ;; "d" #'org-agenda-deadline
                ;; "s" #'org-agenda-schedule)
                ;; (:prefix "s"
                ;; "s" #'org-journal-search
                ;; "f" #'org-journal-search-forever
                ;; "F" #'org-journal-search-future
                ;; "w" #'org-journal-search-calendar-week
                ;; "m" #'org-journal-search-calendar-month
                ;; "y" #'org-journal-search-calendar-year)
            )

            (:map org-journal-search-mode-map
            "n" #'org-journal-search-next
            "p" #'org-journal-search-prev))

)
#+END_SRC



*** Org-roam

#+BEGIN_SRC emacs-lisp
(after! org-roam
  (setq org-roam-directory (expand-file-name "~/docs/org/roam")
        org-roam-index-file "index.org"
))
#+END_SRC

using deft to navigate org-roam file
[[https://www.ianjones.us/2020-05-05-doom-emacs#orga972198][check it here for more info]]

#+BEGIN_SRC emacs-lisp
(use-package deft
      :after org
      :bind
      ("C-c n d" . deft)
      :custom
      (deft-recursive t)
      (deft-use-filter-string-for-filename t)
      (deft-default-extension "org")
      (deft-directory (expand-file-name "~/docs/org/roam")
))
#+END_SRC
*** Org-Agenda
all of this is from [[https://blog.aaronbieber.com/2016/09/25/agenda-interactions-primer.html][The Chonicle]]


#+begin_src emacs-lisp
  (map! :after org-agenda
        :map org-agenda-mode-map
        :m "C-SPC" #'org-agenda-show-and-scroll-up
        :localleader
        "n" #'org-agenda-add-note
        (:prefix ("d" . "date/deadline")
         "d" #'org-agenda-deadline
         "s" #'org-agenda-schedule)
        (:prefix ("c" . "clock")
         "c" #'org-agenda-clock-cancel
         "g" #'org-agenda-clock-goto
         "i" #'org-agenda-clock-in
         "o" #'org-agenda-clock-out
         "r" #'org-agenda-clockreport-mode
         "s" #'org-agenda-show-clocking-issues)
        "q" #'org-agenda-set-tags
        "r" #'org-agenda-refile
        "t" #'org-agenda-todo
        )
#+end_src

#+BEGIN_SRC emacs-lisp
(defun air-org-skip-subtree-if-priority (priority)
  "Skip an agenda subtree if it has a priority of PRIORITY.

PRIORITY may be one of the characters ?A, ?B, or ?C."
  (let ((subtree-end (save-excursion (org-end-of-subtree t)))
        (pri-value (* 1000 (- org-lowest-priority priority)))
        (pri-current (org-get-priority (thing-at-point 'line t))))
    (if (= pri-value pri-current)
        subtree-end
      nil)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun air-org-skip-subtree-if-habit ()
  "Skip an agenda entry if it has a STYLE property equal to \"habit\"."
  (let ((subtree-end (save-excursion (org-end-of-subtree t))))
    (if (string= (org-entry-get nil "STYLE") "habit")
        subtree-end
      nil)))
#+END_SRC

**** Setting up Custom Agendas
+ setting up custom agendas, for Work and for Home
  - note the custom filters =my/org-agenda-skip-function-without-match=
    this allows us to filter out by tags for todos at home

[[https://stackoverflow.com/questions/10074016/org-mode-filter-on-tag-in-agenda-view/33444799#33444799][emacs - Org-mode: Filter on tag in agenda view? - Stack Overflow]]

#+begin_src emacs-lisp
(defun my/org-match-at-point-p (match)
  "Return non-nil if headline at point matches MATCH.
Here MATCH is a match string of the same format used by
`org-tags-view'."
  (funcall (cdr (org-make-tags-matcher match))
           (org-get-todo-state)
           (org-get-tags-at)
           (org-reduced-level (org-current-level))))

(defun my/org-agenda-skip-without-match (match)
  "Skip current headline unless it matches MATCH.

Return nil if headline containing point matches MATCH (which
should be a match string of the same format used by
`org-tags-view').  If headline does not match, return the
position of the next headline in current buffer.

Intended for use with `org-agenda-skip-function', where this will
skip exactly those headlines that do not match."
  (save-excursion
    (unless (org-at-heading-p) (org-back-to-heading))
    (let ((next-headline (save-excursion
                           (or (outline-next-heading) (point-max)))))
      (if (my/org-match-at-point-p match) nil next-headline))))
#+end_src


[[https://emacs.stackexchange.com/questions/18179/org-agenda-command-with-org-agenda-filter-by-tag-not-working][org mode - Org: Agenda command with org-agenda-filter-by-tag not working - Em...]]

#+BEGIN_SRC emacs-lisp
(after! org
  ;; (setq org-agenda-custom-commands
  ;;     '(("%" "Appointments" agenda* "Today's appointments"
  ;;  ((org-agenda-span 1)
  ;;         (org-agenda-max-entries 3)))))

  ;; (setq org-agenda-custom-commands
  ;;     '(("c" "Simple agenda view"
  ;;        ((tags "PRIORITY=\"A\""
  ;;               ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
  ;;                (org-agenda-overriding-header "High-priority unfinished tasks:")))
  ;;         (agenda "")
  ;;         (alltodo ""
  ;;                  ((org-agenda-skip-function
  ;;                    '(or (air-org-skip-subtree-if-priority ?A)
  ;;                         (org-agenda-skip-if nil '(scheduled deadline))))))))))




  (setq
   org-agenda-skip-scheduled-if-deadline-is-shown t
   org-agenda-custom-commands
   '(
     ("c" "Simple agenda view"
      ((tags "PRIORITY=\"A\""
             ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
              (org-agenda-overriding-header "High-priority unfinished tasks:")))
       (agenda "")
       (alltodo ""
                ((org-agenda-skip-function
                  '(or (air-org-skip-subtree-if-priority ?A)
                       (org-agenda-skip-if nil '(scheduled deadline))))))))
     ("d" "Daily agenda and all TODOs"
      ((tags "PRIORITY=\"A\""
             ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
              (org-agenda-overriding-header "High-priority unfinished tasks:")))
       (agenda "" ((org-agenda-ndays 1)))
       (alltodo ""
                ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                (air-org-skip-subtree-if-priority ?A)
                                                (org-agenda-skip-if nil '(scheduled deadline))))
                 (org-agenda-overriding-header "ALL normal priority tasks:"))))
      ((org-agenda-compact-blocks t)))
     ("h" "thing TODO at Home"
      (
       (tags "PRIORITY=\"A\""
             ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
              (org-agenda-overriding-header "High-priority unfinished tasks:")))

       (agenda "" ((org-agenda-ndays 1)
                   (org-agenda-skip-function
                    '(my/org-agenda-skip-without-match "-@work"))
                   (org-agenda-sorting-strategy
                    (quote ((agenda time-up priority-down tag-up))))
                   (org-deadline-warning-days 0)))

       (alltodo ""
                ((org-agenda-skip-function '(or (air-org-skip-subtree-if-habit)
                                                (air-org-skip-subtree-if-priority ?A)
                                                (org-agenda-skip-if nil '(scheduled deadline))
                                                (my/org-agenda-skip-without-match "-@work")
                                                ))
                 (org-agenda-overriding-header "ALL normal priority tasks AT HOME:")))
       )
      ))
   )

  )
#+END_SRC

**** Moving around the Agendas including Custom Agendas
Quick accesss to agenda
Here when =M-SPC= is pressed, the default agenda pops up
RIGHT NOW IT IS DEFAULT TO HOME AGENDA
#+begin_src emacs-lisp
(defun air-pop-to-org-agenda (&optional split)
  ;; Visit the org agenda, in the current window or a SPLIT."
  (interactive "P")
  (org-agenda nil "h")
  (when (not split)
    (delete-other-windows)))

(define-key evil-normal-state-map (kbd "M-SPC") 'air-pop-to-org-agenda)
#+end_src


Moving around with the difference custom agenda
- still need a little bit of work to get this right
#+BEGIN_SRC emacs-lisp
(define-key org-agenda-mode-map "j" 'org-agenda-next-item)
(define-key org-agenda-mode-map "k" 'org-agenda-previous-item)

(defun air-org-agenda-next-header ()
  ;; Jump to the next header in an agenda series."
  (interactive)
  (air--org-agenda-goto-header))

(defun air-org-agenda-previous-header ()
  ;; "Jump to the previous header in an agenda series."
  (interactive)
  (air--org-agenda-goto-header t))

(defun air--org-agenda-goto-header (&optional backwards)
  "Find the next agenda series header forwards or BACKWARDS."
  (let ((pos (save-excursion
               (goto-char (if backwards
                              (line-beginning-position)
                            (line-end-position)))
               (let* ((find-func (if backwards
                                     'previous-single-property-change
                                   'next-single-property-change))
                      (end-func (if backwards
                                    'max
                                  'min))
                      (all-pos-raw (list (funcall find-func (point) 'org-agenda-structural-header)
                                         (funcall find-func (point) 'org-agenda-date-header)))
                      (all-pos (cl-remove-if-not 'numberp all-pos-raw))
                      (prop-pos (if all-pos (apply end-func all-pos) nil)))
                 prop-pos))))
    (if pos (goto-char pos))
    (if backwards (goto-char (line-beginning-position)))))

(define-key org-agenda-mode-map "J" 'air-org-agenda-next-header)
(define-key org-agenda-mode-map "K" 'air-org-agenda-previous-header)


(defun air-org-agenda-capture (&optional vanilla)
  "Capture a task in agenda mode, using the date at point.If VANILLA is non-nil, run the standard `org-capture'."
  (interactive "P")
  (if vanilla
      (org-capture)
    (let ((org-overriding-default-time (org-get-cursor-date)))
      (org-capture nil "a"))))

(define-key org-agenda-mode-map "c" 'air-org-agenda-capture)


#+END_SRC
** Tmux-pane

using with emacsclient in .localrc
#### setting for emacs server/client
# emac GUI
function em()
{
  # -c creates a new frame
  # -a= fires a new emacs server if none is running
  emacsclient -c -a= $*
}
# emac terminal
function emt()
{
  # -c creates a new frame
  # -a= fires a new emacs server if none is running
  emacsclient -t -a= $*
}

This will begins the tmux-pane, because by default, it is disabled
*note*
- this is not working yet... when the ivy mini buffer pops up, cannot navigate it with =c-j= and =c-k=

#+BEGIN_SRC emacs-lisp
;; (use-package! tmux-pane
;;   :config
;;   (tmux-pane-mode)
;;   ;; (map! :leader
;;   ;;       (:prefix ("v" . "tmux pane")
;;   ;;         :desc "Open vpane" :nv "o" #'tmux-pane-open-vertical
;;   ;;         :desc "Open hpane" :nv "h" #'tmux-pane-open-horizontal
;;   ;;         :desc "Open hpane" :nv "s" #'tmux-pane-open-horizontal
;;   ;;         :desc "Open vpane" :nv "v" #'tmux-pane-open-vertical
;;   ;;         :desc "Close pane" :nv "c" #'tmux-pane-close
;;   ;;         :desc "Rerun last command" :nv "r" #'tmux-pane-rerun))
;;   ;; (map! :leader
;;   ;;       (:prefix "t"
;;   ;;         :desc "vpane" :nv "v" #'tmux-pane-toggle-vertical
;;   ;;         :desc "hpane" :nv "h" #'tmux-pane-toggle-horizontal))
  ;; )
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (map!
;;   :after tmux-pane
;;   :map tmux-pane-mode-map
;;   "C-j"
;;   (general-predicate-dispatch
;;     (cmd! (tmux-pane--windmove "down"  "tmux select-pane -D"))
;;     (minibufferp)
;;     #'ivy-next-line)
;;   "C-k"
;;   (general-predicate-dispatch
;;     (cmd! (tmux-pane--windmove "up"  "tmux select-pane -I"))
;;     (minibufferp)
;;     #'ivy-previous-line)
;;   )
#+END_SRC

*** Easy window navigation
#+BEGIN_SRC emacs-lisp
;; (map!
;;  (:after evil
;;    :en "C-h"   #'evil-window-left
;;    :en "C-j"   #'evil-window-down
;;    :en "C-k"   #'evil-window-up
;;    :en "C-l"   #'evil-window-right))
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; Many thanks to the author of and contributors to the following posts:
;; https://gist.github.com/mislav/5189704
;; https://robots.thoughtbot.com/post/53022241323/seamlessly-navigate-vim-and-tmux-splits

;; TODO: Make a script that generates tmux and emacs code without duplication

;; NOTE: My keybindings are not the default emacs ones, using windmove

;; Try to move direction, which is supplied as arg
;; If cannot move that direction, send a tmux command to do appropriate move
(defun windmove-emacs-or-tmux(dir tmux-cmd)
  (interactive)
  (if (ignore-errors (funcall (intern (concat "windmove-" dir))))
      nil                       ;; Moving within emacs
    (shell-command tmux-cmd)) ;; At edges, send command to tmux
  )

                                        ;Move between windows with custom keybindings
(global-set-key (kbd "C-k")
                '(lambda () (interactive) (windmove-emacs-or-tmux "up"  "tmux select-pane -U")))
(global-set-key (kbd "C-j")
                '(lambda () (interactive) (windmove-emacs-or-tmux "down"  "tmux select-pane -D")))
(global-set-key (kbd "C-l")
                '(lambda () (interactive) (windmove-emacs-or-tmux "right"  "tmux select-pane -R")))
(global-set-key (kbd "C-h")
                '(lambda () (interactive) (windmove-emacs-or-tmux "left"  "tmux select-pane -L")))

;; (define-key evil-normal-state-map (kbd "S-SPC") 'air-pop-to-org-agenda)
#+END_SRC

** Centaur Tabs

#+BEGIN_SRC emacs-lisp
(after! centaur-tabs
    (centaur-tabs-group-by-projectile-project)
    (setq centaur-tabs-height 15)
    (setq centaur-tabs-bar-height 15)
    (setq centaur-tabs-cycle-scope 'tabs)
)
(map!
      (:when (featurep! :ui tabs)
       :n "L"   #'centaur-tabs-forward
       :n "H"   #'centaur-tabs-backward
       )
    )
#+END_SRC

** Disabled Solaire Mode
this allow for colorscheme to work in the terminal also

#+BEGIN_SRC emacs-lisp
(after! solaire-mode
  (solaire-global-mode -1))
#+END_SRC

** Elscreen - disabled in ~packages.el~
some evil bindings for elscreen - [[https://www.emacswiki.org/emacs/evil-elscreen.el][here]]

#+BEGIN_SRC emacs-lisp
(use-package! elscreen
    :config
    (elscreen-start)
    (map!
    (:after elscreen
        :n "H"    #'elscreen-previous
        :n "L"    #'elscreen-next
    )
    )
    (after! elscreen
        (define-key evil-normal-state-map "gt" 'elscreen-next)
        (define-key evil-normal-state-map "gT" 'elscreen-previous)
        (setq elscreen-tab-display-kill-screen nil)
        (setq elscreen-tab-display-control nil)
    )
)
#+END_SRC

** Projectile

#+begin_src emacs-lisp
(after! projectile
  (setq org-tags-exclude-from-inheritance '("project"))
  (add-to-list 'projectile-globally-ignored-directories "archive")
  )

#+end_src

** Tramp insert file
insert file from remote server
#+begin_src emacs-lisp
(defun hle-insert-vnc1-vbuf ()
  (interactive)
  (insert-file "/ssh:socd:~/.vbuf")
   )

(map! :leader
         :desc "vbuf paste" :g "y" #'hle-insert-vnc1-vbuf
       )

;; (define-key evil-normal-state-map (kbd "SPC-y") 'hle-insert-vnc1-vbuf)
#+end_src
** Better Jumper
#+begin_src emacs-lisp
 (after! better-jumper
   (setq better-jumper-context 'window)
 )
 #+END_SRC
** Evil
*** Snipe
#+begin_src emacs-lisp
 (after! evil-snipe
   (setq evil-snipe-scope 'visible)
 )
 #+END_SRC


** Workspaces
#+BEGIN_SRC emacs-lisp
(setq +workspaces-on-switch-project-behavior t)

;; workspace configuration
;;   - do not create new workspace for each session
(after! persp-mode
  (setq persp-emacsclient-init-frame-behaviour-override "main"))
#+END_SRC

** Counsel
#+BEGIN_SRC emacs-lisp
(use-package! counsel-etags
  :defer t
  :init
  (add-hook! 'prog-mode-hook
    (add-hook! 'after-save-hook
               :append :local 'counsel-etags-virtual-update-tags))
  :config
  (setq counsel-etags-update-interval 60)
  (setq imenu-create-index-function 'counsel-etags-imenu-default-create-index-function)
 )

(map!
 :nv "ge"  #'counsel-etags-find-tag-at-point
 :nv "gE"  #'counsel-etags-find-tag
 )
#+END_SRC

** make it vim normal

*** Restoring old Y behavior (yank the whole line)
#+BEGIN_SRC elisp
;; add to ~/.doom.d/config.el
(setq! evil-want-Y-yank-to-eol nil)
#+END_SRC

*** Disabling cursor movement when exiting insert mode
#+BEGIN_SRC elisp
;; add to ~/.doom.d/config.el
(setq evil-move-cursor-back nil)
#+END_SRC

* Custom global keybindings
load this at the very end, may be able to move this to the "keybind"
#+BEGIN_SRC emacs-lisp
(load! "+bindings.el")
#+END_SRC
